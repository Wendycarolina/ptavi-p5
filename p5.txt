 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
 ** ¿Cuántos paquetes componen la captura?
    954
 ** ¿Cuánto tiempo dura la captura?
    56.149655 segundos
 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?
    IP : 192.168.1.34. Debido a que observamos el tráfico de paquetes bidireccional desde la IP 192.168.1.34 a las Ip's 80.58.61.250 y 86.64.162.35. Podría haberse hecho en cualquier otra máquina
    que estuviese conectada a la IP privada y que tuviera visibilidad de todo el tráfico de paquetes que le llegan y envían.
    Privada, por el rango de reseva, 192.168
    

3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.
 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?
    UDP con un 96,23% frente a un 2.10% de TCP, ya que contiene todo lo que nos va a interesar, STUN?, SIP, RTP, RTCP(protocolo de control de RTP)
 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?
    SIP, RTP, RTCP

4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.
 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?
    Casi al principio y al final, que tendrán que ver con el inicio y la finalización de la conexión.
 ** Y los paquetes con RTP, ¿cuándo se envían?
    En los segundos centrales del segundo 15 al 40 aproximadamente.
    


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.
 ** ¿Qué servicio es el utilizado en estas tramas?
    varias interacciones cliente-servidor en DNS
 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?
    86...
 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?
 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?

Type PTR dominio inverso
6. A continuación, hay más de una docena de tramas TCP/HTTP.
 ** ¿Podrías decir la URL que se está pidiendo?
    http://ekiga.net/ip/
 ** ¿Qué user agent (UA) la está pidiendo?
    Ekiga
 ** ¿Qué devuelve el servidor?
    83.36.48.212
 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?
    El servidor nos responde con nuestra IP pública que es la dirección con la que me pongo en contacto con el.

7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.
 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.
    STUN es un protocolo de red del tipo cliente/servidor que permite a clientes NAT encontrar su dirección IP pública,
    el tipo NAT en el que se encuentra y el puerto de Internet asociado con el puerto local a traves de NAT. Esta información
    es usada para configurar una comunicación UDP entre dos host que se encuentren tras enrutadores NAT.
    Usamos este protocolo ya que estamos trabajando con IP privada y Ekiga necesita nuestra IP pública para realizar l comunicación.
 ** ¿Estamos tras un NAT?
    Si, ya que como explicamos en el apartado anterior necesitamos la IP pública.

8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.
 ** ¿Qué dirección IP tiene el servidor Registrar?
    86.64.162.35
 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?
    5060
 ** ¿Qué método SIP utiliza el UA para registrarse?
    REGISTER
 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?
    INVITE, ACK, OPTIONS, BYE, CANCEL, NOTIFY, REFER, MESSAGE



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

9. Fijémonos en las tramas siguientes a la número 46:
 ** ¿Se registra con éxito en el primer intento?
    No
 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?
    Si recibimos un 200 ACK.
 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)
    Podemos ver que en el segundo intento hay 712 mientras que en primero había 523, esto se debe a que en el segundo intento se inserta en campo Authorization.
 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.
    3600

10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.
 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?
    Si, en el paquete 84 dentro de Session Initiation Protocol en el campo from de Message Header. En este caso "Gregorio Robles".
 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?
    El cuerpo de la trama contiene : Owner/creator, Connection Information, Time Description, Media Description, Media Attribute, Connection Information.
    El protocolo/formato que usa es SDP.
 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?
    No, contesta con el status 407 Proxy Authentication Required, deberia recibir un ACK 200 confirmando que se ha efectuado correctamente.
 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?
    Se diferencia a que en el segundo INVITE se añade el campo Proxy Authentication, que es lo que se necesita para que e servidor 
    cumpla los requisitos y el método realice correctamente.

11. Una vez conectado, estudia el intercambio de tramas.
 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?
    RTP, ICMP y RTCP.
 ** ¿Cuál es el tamaño de paquete de los mismos?
    RTP : 214
    RTCP: 102
    ICMP: 70
 ** ¿Se utilizan bits de padding?
    No, ya que tiene valor False en el campo padding.
 ** ¿Cuál es la periodicidad de los paquetes que se envían?
    Los paquetes RTP envían 160 bytes (1280bits) de los cuales hay 50 . Por lo tanto la periodicidad es 1/50= 20 ms 
 ** ¿Cuántos bits/segundo estamos enviando?
    Dado que enviamos 50 paquetes/segundo con el tamaño de cada paquete 1280 bits/paquete => 50*1280 = 64bits/segundo



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? ¿por qué?
    Hay 2 flujos, se muestran si vamos a la opción RTP de la pestaña Telephony. Si nos fijamos en un primer momento en lo que contiene la trama
    105 contiene toda la información. En ella incluye un audio de puerto destino 12440 y un vídeo 19062.
 ** ¿Cuántos paquetes se pierden?
    Ninguno.
 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?
    Audio : valor máximo 1290.44
    Vídeo : valor máximo 1290.48
 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?
    Audio:
    jitter medio:42.50      jitter máximo:119.64
    Vídeo:
    jitter medio:153.24     jitter máximo: 183.10
    Quiere decir que se produce un retardo en la transmisión de los paquetes. Tanto el audio como el vídeo son pierden
    paquetes RTP, debido a este jitter por lo que es una conversación de mala calidad.

13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?
    Delt 0ms y jitter 0ms.
 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?
    Si, debido a que el campo delta y jitter tienen valor cero.
 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?
    En el paquete 247, con un jitter de 38.82ms.
 ** ¿A qué se debe el cambio tan brusco del jitter?
    A un retardo considerable en el envio/recepción del paquete.
 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?
    No ya que los valores delta del paquete actual con el anterior tienen una gran diferencia.
 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?


14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?
    24,802 segundos.
 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?
    SSRC:
        Vídeo : 0x43306582
        Audio : 0xBF4AFD37
    No hay CSRCs debido a que no hay mezcladores, que son la forma en la que los obtenemos.



15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?
    El método BYE.
 ** ¿En qué trama(s)?
    En las tramas 924,925,927 y 933.
 ** ¿Por qué crees que se envía varias veces?
    Para asegurarse de que la transmisión se realice correctamente y de esta manera al recibir uno ACK de alguno de los
    BYE enviados, dar por terminada la llamada.

16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?
    Porque la envía con el campo Expire = 0, que hace que borre su sesión.
 ** ¿En qué trama sucede esto?
    En la trama 950.
 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?
    Se diferencia en que al principio de la sesión el campo expire era 3600, dirente de cero.


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?
    No, ya que estamos trabajando con ip'publicas directamente.
 ** ¿Son diferentes el registro y la descripción de la sesión?
    Se diferencian en el campo Allow, ya que contiene más métodos que la anterior captura:
    INVITE, ACK, BYE, CANCEL, SUBSCRIBE, NOTIFY, REFER, MESSAGE, INFO, PING, PRACK.


18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?
    Tenemos dos flujos de audio. Lo comprobamos como hicimos anteriormente en Telephony-RTP-Show all streams.
 ** ¿Cuál es su periodicidad?
    La periodicidad es la misma, 20ms.
 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
    Flujos:
        Audio1: Delta máx = 26.73ms | jitter máx = 1.15ms | jitter medio = 0.32ms
        Audio2: Delta máx = 27.10ms | jitter máx = 1.24ms | jitter medio = 0.26ms
    
 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.
    Si, si vamos a Telephony-VoIP Call-Play-Decode.
 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?
    El tipo de servicio que ofrece es de música (audio).


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
